---
// src/components/NavLink.astro

interface Props {
  href: string;
  text: string;
  icon?: string | ImageMetadata; // 支持字符串路径或图片元数据
  iconPosition?: "before" | "after";
  isImage?: boolean;
  alt?: string;
  children?: any[];
}

const {
  href,
  text,
  icon,
  iconPosition = "before",
  isImage = true, // 默认值改为true，因为我们现在主要使用SVG图片
  alt = "",
  children = [],
} = Astro.props;
---

<li class="relative group">
  <a
    href={href}
    class="text-text hover:text-text-light hover:bg-background-hover dark:text-text-dark dark:hover:text-text-dark dark:hover:bg-background-hover-dark px-4 py-2 mx-2 my-2 rounded transition duration-300 ease-in-out flex items-center"
    data-icon-position={iconPosition}
  >
    {
      iconPosition === "before" && icon && isImage && (
        <img src={typeof icon === "string" ? icon : icon.src} alt={alt} />
      )
    }
    <span>{text}</span>
    {
      iconPosition === "after" && icon && isImage && (
        <img src={typeof icon === "string" ? icon : icon.src} alt={alt} />
      )
    }
    {
      children && children.length > 0 && (
        <svg
          class="w-4 h-4 ml-1 lg:block hidden"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M19 9l-7 7-7-7"
          />
        </svg>
      )
    }
  </a>
  {
    children && children.length > 0 && (
      <>
        {/* 桌面端下拉菜单 */}
        <ul class="absolute left-0 mt-0 w-48 bg-background-secondary dark:bg-background-secondary-dark rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50 lg:block hidden">
          {children.map((child) => (
            <li>
              <a
                href={child.href}
                class="block px-4 py-2 text-sm text-text hover:text-text-light hover:bg-background-hover dark:text-text-dark dark:hover:text-text-dark dark:hover:bg-background-hover-dark transition duration-300"
              >
                {child.text}
              </a>
            </li>
          ))}
        </ul>
        {/* 移动端展开菜单 */}
        <ul class="lg:hidden pl-8 space-y-2">
          {children.map((child) => (
            <li>
              <a
                href={child.href}
                class="block px-4 py-2 text-sm text-text hover:text-text-light hover:bg-background-hover dark:text-text-dark dark:hover:text-text-dark dark:hover:bg-background-hover-dark transition duration-300 rounded"
              >
                {child.text}
              </a>
            </li>
          ))}
        </ul>
      </>
    )
  }
</li>

<style>
  /*  添加图标和文本间距 */
  a > img {
    margin-right: 0.5rem; /* 默认图标在前面，所以添加右边距 */
  }

  /* 如果图标在后面，则需要调整边距 */
  [data-icon-position="after"] > img {
    margin-right: 0; /* 清除默认右边距 */
    margin-left: 0.5rem; /* 添加左边距 */
  }
  img {
    width: 20px; /*按需调整*/
    height: 20px;
    filter: brightness(0) saturate(100%);
    opacity: 0.8;
  }

  /* 浅色模式下的图标颜色 */
  :global(.light) img {
    filter: invert(20%) sepia(10%) saturate(100%) hue-rotate(0deg)
      brightness(95%) contrast(95%);
  }

  /* 深色模式下的图标颜色 */
  :global(.dark) img {
    filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(0deg)
      brightness(100%) contrast(100%);
  }

  /* 鼠标悬停时的图标颜色变化 */
  a:hover img {
    opacity: 1;
    transition: opacity 0.3s ease-in-out;
  }

  /* 子菜单定位 */
  .group:hover > ul {
    top: 100%;
  }

  /* 移动端子菜单样式 */
  @media (max-width: 1024px) {
    .group {
      width: 100%;
    }
  }
</style>
